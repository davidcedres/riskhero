// generator client {
//     provider = "prisma-client-js"
// }

generator erd {
    provider = "prisma-erd-generator"
    theme    = "forest"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Organization {
    id    Int    @id @default(autoincrement())
    name  String @unique
    users User[]
    areas Area[]
}

model User {
    id             Int           @id @default(autoincrement())
    email          String        @unique
    password       String
    name           String
    role           Role
    organization   Organization? @relation(fields: [organizationId], references: [id])
    inspections    Inspection[]
    organizationId Int?
    updatedAt      DateTime
}

model Area {
    id             Int          @id @default(autoincrement())
    name           String
    organization   Organization @relation(fields: [organizationId], references: [id])
    inspections    Inspection[]
    organizationId Int
    updatedAt      DateTime

    // area name is unique in the scope of the organization it belongs to
    @@unique([organizationId, name])
}

model Inspection {
    id           Int           @id @default(autoincrement())
    area         Area          @relation(fields: [areaId], references: [id])
    inspector    User          @relation(fields: [userId], references: [id])
    observations Observation[]
    Report       Report[]
    status       Status
    type         Type
    date         DateTime
    areaId       Int
    userId       Int
    updatedAt    DateTime
}

model Observation {
    id           Int        @id @default(autoincrement())
    state        State
    inspection   Inspection @relation(fields: [inspectionId], references: [id])
    condition    Condition  @relation(fields: [conditionId], references: [id])
    category     Category   @relation(fields: [categoryId], references: [id])
    evidences    Evidence[]
    description  String
    analysis     String?
    inspectionId Int
    conditionId  Int
    categoryId   Int
    updatedAt    DateTime
}

model Report {
    id           Int        @id @default(autoincrement())
    url          String?
    inspection   Inspection @relation(fields: [inspectionId], references: [id])
    inspectionId Int        @unique
    conclusion   String
    createdAt    DateTime
}

model Category {
    id          Int           @id @default(autoincrement())
    name        String        @unique
    conditions  Condition[]
    updatedAt   DateTime
    Observation Observation[]
}

model Condition {
    id           Int           @id @default(autoincrement())
    name         String        @unique
    observations Observation[]
    categories   Category[]
    updatedAt    DateTime
}

model Evidence {
    id            Int         @id @default(autoincrement())
    key           String
    url           String
    observation   Observation @relation(fields: [observationId], references: [id])
    observationId Int
    updatedAt     DateTime
}

enum Role {
    MANAGER
    EMPLOYEE
    ADMIN
}

enum Type {
    ANNOUNCED
    UNANNOUNCED
}

enum Status {
    OPEN
    CLOSED
    DONE
}

enum State {
    ACCEPTABLE
    UNSAFE
    MISSING
    NEEDS_REPAIR
    SKIPPED
}
